substitutions:
  name: "syntek-multisensor01"
  friendly_name: "Syntek Creations MS01"
  project_name: "Syntek Creations.MultiSensor (MS01)"
  project_version: "1.1"
  temp_offset: "-8"
  humid_offset: "0"
  pir_delay_off: "10s"
  occupancy_delay_off: "10s"
  
  hidden_ssid: "false"
  factory_reset_disabled: "true"


esphome:
  name: "${name}"
  name_add_mac_suffix: true
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev

dashboard_import:
  package_import_url: github://SyntekCreations/MultiSernsor01/multisensor01-ha.yaml@main
  import_full_config: false

improv_serial:

esp32_improv:
  authorizer: none

logger:

api:

ota:

wifi:
  fast_connect: false
  ap: {}

captive_portal:
    
i2c:
     sda: 21
     scl: 22
     scan: true

uart:
  id: uart_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

light: 
  - platform: status_led
    name: "Status LED"
    pin:
      number: 18
      inverted: true
    entity_category: config

binary_sensor:
  - platform: gpio
    pin:
      number: 32
      mode: INPUT_PULLDOWN
    name: "PIR Detection"
    id: pirsensor
    device_class: motion
    filters:
      - delayed_off: ${pir_delay_off}

  - platform: gpio
    name: mmWave Detection
    id: mmwave_detection
    device_class: motion
    pin:
      number: 23
      mode: INPUT_PULLDOWN

  - platform: template
    name: "Occupancy Combined"
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: ${occupancy_delay_off}
    lambda: |-
      if ( id(mmwave_detection).state or id(pirsensor).state) {
        return true;
      } 
      else if (id(mmwave_detection).state == 0 and id(pirsensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }

sensor:
  - platform: sht4x
    temperature:
      name: "Temperature"
      filters:
        offset: ${temp_offset}
    humidity:
      name: "Humidity"
      filters:
        offset: ${humid_offset}
    address: 0x44
    heater_max_duty: 0.0
    update_interval: 20s

  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 20s


switch:
  - platform: template
    name: "mmW Sensor"
    id: "mmwave_sensor"
    entity_category: config
    optimistic: true
    restore_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "mmW LED"
    id: "mmwave_led"
    entity_category: config
    optimistic: true
    restore_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "uart_presence_output"
    id: "uart_presence_output"
    entity_category: config
    internal: true
    optimistic: true
    restore_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "uart_target_output"
    id: "uart_target_output"
    entity_category: config
    internal: true
    optimistic: true
    restore_state: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  - platform: template
    name: mmW Distance
    id: mmwave_distance
    entity_category: config
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 15
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmW Off Latency
    id: mmwave_off_latency
    entity_category: config
    min_value: 1
    max_value: 60
    initial_value: 15
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmW On Latency
    id: mmwave_on_latency
    entity_category: config
    min_value: 0
    max_value: 60
    initial_value: 0
    optimistic: true
    step: 0.5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmW Sensitivity
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: Restart_internal
    id: restart_internal
    entity_category: config 
    internal: true
  - platform: template
    name: "Restart mmWave Sensor"
    id: "restart_mmwave"
    entity_category: config
    internal: true
    on_press:
      - uart.write: "resetSystem"
  - platform: template
    name: Restart MultiSensor
    entity_category: config
    on_press:
      - button.press: restart_mmwave
      - button.press: restart_internal
  - platform: template
    name: "mmW Default Settings"
    internal: true
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
  
