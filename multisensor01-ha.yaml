substitutions:
  name: "syntek-multisensor01"
  friendly_name: "Syntek Creations MS01"
  device_name: "Temp-Name"
  project_name: "Syntek Creations.MultiSensor (MS01)"
  project_version: "1.0"
  temp_offset: "-7"
  humid_offset: "0"
  pir_delay_off: "10s"
  occupancy_delay_off: "10s"
  factory_reset_disabled: "true"
  uart_target_output_disabled: "true"
  uart_presence_output_disabled: "true"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev

improv_serial:

esp32_improv:
  authorizer: none

logger:

api:

ota:

wifi:
  fast_connect: false
  ap: {}

captive_portal:

dashboard_import:
  package_import_url: github://SyntekCreations/MultiSernsor01/multisensor01-ha.yaml@main
  import_full_config: false
    
i2c:
     sda: 21
     scl: 22
     scan: true

uart:
  id: uart_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 115200

sensor:
  - platform: sht4x
    temperature:
      name: "Temperature"
      filters:
        offset: ${temp_offset}
    humidity:
      name: "Humidity"
      filters:
        offset: ${humid_offset}
    address: 0x44
    heater_max_duty: 0.0
    update_interval: 20s

  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 20s
  
light: 
  - platform: status_led
    name: "Status LED"
    pin:
      number: 18
      inverted: true
    entity_category: config

binary_sensor:
  - platform: gpio
    pin:
      number: 32
      mode: INPUT_PULLDOWN
    name: "PIR Detection"
    id: pirsensor
    device_class: motion
    filters:
      - delayed_off: ${pir_delay_off}

  - platform: gpio
    name: mmWave Detection
    id: mmwave_detection
    device_class: motion
    pin:
      number: 23
      mode: INPUT_PULLDOWN
    on_state:
      - if:
          condition:
            binary_sensor.is_off: mmwave_detection
          then:
            - sensor.template.publish:
                id: num_targets
                state: 0
            - lambda: |-
                return clearTargets();

  - platform: template
    name: "Occupancy Combined"
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: ${occupancy_delay_off}
    lambda: |-
      if ( id(mmwave_detection).state or id(pirsensor).state) {
        return true;
      } 
      else if (id(mmwave_detection).state == 0 and id(pirsensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }

sensor:      
  - platform: template
    name: target_1_distance_m
    id: target_1_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_2_distance_m
    id: target_2_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_3_distance_m
    id: target_3_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_4_distance_m
    id: target_4_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_1_SNR
    id: target_1_SNR # do not change
    internal: true

  - platform: template
    name: target_2_SNR
    id: target_2_SNR # do not change
    internal: true
    
  - platform: template
    name: target_3_SNR
    id: target_3_SNR # do not change
    internal: true
    
  - platform: template
    name: target_4_SNR
    id: target_4_SNR # do not change
    internal: true

  - platform: template
    name: num_targets
    id: num_targets # do not change
    accuracy_decimals: 0

  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
      
switch:
  - platform: safe_mode
    name: use_safe_mode

  - platform: template
    name: show_target_stats
    id: show_target_stats
    optimistic: true
    internal: true
    on_turn_off:
      - lambda: 'return clearTargets();'

  - platform: template
    name: mmwave_sensor
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - script.execute: turn_on_mmwave_sensor
    turn_off_action:
      then:
        - script.execute: turn_off_mmwave_sensor

  - platform: template
    name: led
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_on_led
            else:
              - delay: 100ms
              - script.execute: turn_on_led
    turn_off_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_off_led
            else:
              - delay: 100ms
              - script.execute: turn_off_led

number:
  - platform: template
    name: distance
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      then:
        - globals.set:
            id: distance_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 75ms
              - script.execute: set_distance
            else:
              - delay: 75ms
              - script.execute: set_distance 
      
  - platform: template
    name: latency
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      then:
        - globals.set:
            id: latency_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 50ms
              - script.execute: set_latency
            else:
              - delay: 50ms
              - script.execute: set_latency

  - platform: template
    name: sensitivity
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      then:
        - globals.set:
            id: sensitivity_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 25ms
              - script.execute: set_sensitivity
            else:
              - delay: 25ms
              - script.execute: set_sensitivity

button:
  - platform: restart
    name: Restart_ESP_${device_name}
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: factory_reset_mmwMCU_${device_name}
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

globals:
  - id: distance_global
    type: float
  - id: latency_global
    type: float
  - id: sensitivity_global
    type: int

script:
  - id: turn_on_mmwave_sensor
    then:
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 2"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s 
      - uart.write: "sensorStart"

  - id: turn_off_mmwave_sensor
    then:
      - uart.write: "sensorStop"

  - id: turn_on_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s 
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
    
  - id: turn_off_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_distance
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", id(distance_global));
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_latency
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", id(latency_global));
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_sensitivity
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string(id(sensitivity_global));
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays