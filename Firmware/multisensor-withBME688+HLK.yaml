substitutions:
  name: syntek-multisensor01-a0b068
  friendly_name: Syntek Creations MS01 a0b068
  project_name: "Syntek Creations.MultiSensor (MS01)"
  project_version: "1.1"
  temp_offset: "-6"
  humid_offset: "10"
  pir_delay_off: "10s"
  occupancy_delay_off: "10s"
  
  hidden_ssid: "false"
  factory_reset_disabled: "true"


esphome:
  name: "${name}"
  name_add_mac_suffix: false
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"
    on_boot:    #LD1115H Initial Setting
    priority: -200
    then:
      - uart.write:
          id: LD1115H_UART_BUS
          data: !lambda |-
            std::string th1st = "th1=" + str_sprintf("%.0f",id(LD1115H_TH1).state) +" \n";
            return std::vector<uint8_t>(th1st.begin(), th1st.end());
      - uart.write:
          id: LD1115H_UART_BUS
          data: !lambda |-
            std::string th2st = "th2=" + str_sprintf("%.0f",id(LD1115H_TH2).state) +" \n";
            return std::vector<uint8_t>(th2st.begin(), th2st.end());

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: latest

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components #Thanks for @ssieb components.
    components: [ serial ]

improv_serial:

esp32_improv:
  authorizer: none

logger:

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:
    
i2c:
  - id: "onboard"
    sda: GPIO21
    scl: GPIO22
    scan: true

  - id: "bme"
    sda: GPIO25
    scl: GPIO26
    scan: true

uart:
  id: LD1115H_UART_BUS
  rx_pin: GPIO17  #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
  tx_pin: GPIO23  #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  setup_priority: 200 #Set Priority To Prevent Boot Loop or Fail

globals:
  - id: LD1115H_Last_Time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
  - id: LD1115H_Last_Mov_Time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
  - id: LD1115H_Clearence_Status
    type: bool
    restore_value: no
    initial_value: "false"

number:
  - platform: template
    name: ${upper_devicename} LD1115H TH1 #TH1 is Movement/Motion Sensitivity
    id: LD1115H_TH1
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "120" #Default TH1 Setting
    min_value: 20
    max_value: 1200
    step: 10
    set_action:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th1st = "th1=" + str_sprintf("%.0f",x) +" \n";
              return std::vector<uint8_t>(th1st.begin(), th1st.end());
  - platform: template
    name: ${upper_devicename} LD1115H TH2 #TH2 is Occupancy/Presence Sensitivity
    id: LD1115H_TH2
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "250" #Default TH2 Setting
    min_value: 50
    max_value: 2500
    step: 10
    set_action:
      then:
        - uart.write:
            id: LD1115H_UART_BUS
            data: !lambda |-
              std::string th2st = "th2=" + str_sprintf("%.0f",x) +" \n";
              return std::vector<uint8_t>(th2st.begin(), th2st.end());
  - platform: template
    name: ${upper_devicename} LD1115H Clearence Time
    id: LD1115H_Clear_Time
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "5" #LD1115H Mov/Occ > Clearence Time Here
    min_value: 0.5
    max_value: 20
    step: 0.5
  - platform: template
    name: ${upper_devicename} LD1115H Movement Time
    id: LD1115H_Mov_Time
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "1" #LD1115H Mov > Occ Time Here
    min_value: 0.5
    max_value: 10
    step: 0.5

bme680_bsec:
    id: bme688_internal
    i2c_id: bme
    address: 0x77
    temperature_offset: 0
    iaq_mode: static
    sample_rate: lp
    state_save_interval: 6h

light: 
  - platform: status_led
    name: "Status LED"
    pin:
      number: 18
      inverted: true
    entity_category: config

binary_sensor:
  - platform: gpio
    pin:
      number: 32
      mode: INPUT_PULLDOWN
    name: "PIR Detection"
    id: pirsensor
    device_class: motion
    filters:
      - delayed_off: ${pir_delay_off}

  - platform: template
    name: "Occupancy Combined"
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: ${occupancy_delay_off}
    lambda: |-
      if ( id(mmwave_detection).state or id(pirsensor).state) {
        return true;
      } 
      else if (id(mmwave_detection).state == 0 and id(pirsensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }


  - platform: template
    name: ${upper_devicename} LD1115H Occupancy or Movement
    id: LD1115H_MovOcc_Binary
    device_class: occupancy
  - platform: template
    name: ${upper_devicename} LD1115H Movement
    id: LD1115H_Mov_Binary
    device_class: motion

sensor:
  - platform: sht4x
    i2c_id: onboard
    temperature:
      name: "Temperature"
      filters:
        offset: ${temp_offset}
    humidity:
      name: "Humidity"
      filters:
        offset: ${humid_offset}
    address: 0x44
    heater_max_duty: 0.0
    update_interval: 20s

  - platform: bh1750
    i2c_id: onboard
    name: "Illuminance"
    address: 0x23
    update_interval: 20s

  - platform: bme680_bsec
    bme680_bsec_id: bme688_internal
    temperature:
      name: "BME688 Temperature"
      sample_rate: lp
      filters:
        - median
    pressure:
      name: "BME688 Pressure"
      sample_rate: lp
      filters:
        - median
    humidity:
      name: "BME688 Humidity"
      sample_rate: lp
      filters:
        - median
    gas_resistance:
      name: "BME688 Gas Resistance"
      id: iaq
      filters:
        - median
    iaq:
      name: "BME688 IAQ"
      filters:
        - median
      id: iaq_filter
    iaq_accuracy:
      name: "BME688 Numeric IAQ Accuracy"
    co2_equivalent:
      name: "BME688 CO2 Equivalent"
      filters:
        - median
    breath_voc_equivalent:
      name: "BME688 Breath VOC Equivalent"
      filters:
        - median

  - platform: template
    name: ${upper_devicename} LD1115H Spectral line
    id: LD1115H_Spectral
    icon: "mdi:radar"
    unit_of_measurement: ""
    accuracy_decimals: 0
  - platform: template
    name: ${upper_devicename} LD1115H Signal Strength
    id: LD1115H_Signal
    icon: "mdi:signal-distance-variant"
    unit_of_measurement: ""
    accuracy_decimals: 0
    filters:    # Use Fliter To Debounce
    - sliding_window_moving_average:
        window_size: 8
        send_every: 2
    - heartbeat: 0.2s

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "BME688 IAQ Accuracy"

  - platform: template
    name: "Air Quality (IAQ)"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq_filter).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq_filter).state) >= 51 && int(id(iaq_filter).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq_filter).state) >= 101 && int(id(iaq_filter).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq_filter).state) >= 151 && int(id(iaq_filter).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq_filter).state) >= 201 && int(id(iaq_filter).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq_filter).state) >= 251 && int(id(iaq_filter).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq_filter).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

  - platform: serial
    uart_id: LD1115H_UART_BUS
    name: ${upper_devicename} LD1115H UART Text
    id: LD1115H_UART_Text
    icon: "mdi:format-text"
    internal: False #If Don't Want to See UART Receive Data, Set To True
    on_value:
      lambda: |-
        if (id(LD1115H_UART_Text).state.substr(0,3) == "occ") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Spectral).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          if ((time(NULL)-id(LD1115H_Last_Mov_Time))>id(LD1115H_Mov_Time).state) {
            id(LD1115H_Occupancy).publish_state("Occupancy");
            if (id(LD1115H_MovOcc_Binary).state == false) {
              id(LD1115H_MovOcc_Binary).publish_state(true);
            }
            if (id(LD1115H_Mov_Binary).state == true) {
              id(LD1115H_Mov_Binary).publish_state(false);
            }
          }
          if (id(LD1115H_MovOcc_Binary).state == false) {
            id(LD1115H_MovOcc_Binary).publish_state(true);
          }
          id(LD1115H_Last_Time) = time(NULL);
          if (id(LD1115H_Clearence_Status) == true) {
            id(LD1115H_Clearence_Status) = false;
          }
        }
        else if (id(LD1115H_UART_Text).state.substr(0,3) == "mov") {
          id(LD1115H_Signal).publish_state(atof(id(LD1115H_UART_Text).state.substr(7).c_str()));
          id(LD1115H_Spectral).publish_state(atof(id(LD1115H_UART_Text).state.substr(5,2).c_str()));
          id(LD1115H_Occupancy).publish_state("Movement");
          if (id(LD1115H_MovOcc_Binary).state == false) {
            id(LD1115H_MovOcc_Binary).publish_state(true);
          }
          if (id(LD1115H_Mov_Binary).state == false) {
            id(LD1115H_Mov_Binary).publish_state(true);
          }
          id(LD1115H_Last_Mov_Time) = time(NULL);
          id(LD1115H_Last_Time) = time(NULL);
          if (id(LD1115H_Clearence_Status) == true) {
            id(LD1115H_Clearence_Status) = false;
          }
        }
  - platform: template
    name: ${upper_devicename} LD1115H Occupancy Status
    id: LD1115H_Occupancy
    icon: "mdi:motion-sensor"



  
